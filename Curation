{
 "metadata": {
  "name": "HW3"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Import packages\n\nimport urllib\nimport json\nimport pandas as pd\nfrom time import gmtime, strftime, strptime, ctime\nfrom cPickle import load, dump\nfrom datetime import date\nfrom datetime import datetime\n",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 404
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#To extract new live data execute the following blocks of code:",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 331
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Locate earthquake data of interest from the USGS website: http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php\n\n#Earthquake data of magnitude 4.5+ that's been updated in the past 7 days.\nurl45w = 'http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson'\n\n#Earthquake data of magnitude 1.0+ that's been updated in the past 7 days.\nurl1w = \"http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_week.geojson\"\n\n#Earthquake data of magnitude 1.0+ that's been updated in the past hour.\nurl1h = \"http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_hour.geojson\"\n",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 332
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Load earthquake data of interest into a Pandas dataframe. \n\nd = json.loads(urllib.urlopen(url1w).read())\ndata = pd.DataFrame(d.items())\n",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 333
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "data",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>     type</td>\n      <td>                                 FeatureCollection</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td> features</td>\n      <td> [{u'geometry': {u'type': u'Point', u'coordinat...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>     bbox</td>\n      <td> [-179.4843, -56.6339, -3.1, 179.0595, 66.7659,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td> metadata</td>\n      <td> {u'status': 200, u'count': 1094, u'title': u'U...</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
       "output_type": "pyout",
       "prompt_number": 336,
       "text": "          0                                                  1\n0      type                                  FeatureCollection\n1  features  [{u'geometry': {u'type': u'Point', u'coordinat...\n2      bbox  [-179.4843, -56.6339, -3.1, 179.0595, 66.7659,...\n3  metadata  {u'status': 200, u'count': 1094, u'title': u'U..."
      }
     ],
     "prompt_number": 336
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Parse Data\n#Specifically we are interested in the features of the earthquakes\n\n#We pull out features from data.\nearthquakes=data[1][1]",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 337
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#These are the features of an earthquake\n#The data for one earthquake\nanEarthquake = earthquakes[1]\nprint earthquakes[1]",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "{u'geometry': {u'type': u'Point', u'coordinates': [-119.4712, 37.0967, 17.1]}, u'type': u'Feature', u'properties': {u'rms': 0.02, u'code': u'72091921', u'cdi': None, u'sources': u',nc,', u'nst': None, u'tz': -420, u'title': u'M 2.0 - 2km NE of Auberry, California', u'magType': u'Md', u'detail': u'http://earthquake.usgs.gov/earthquakes/feed/v1.0/detail/nc72091921.geojson', u'sig': 62, u'net': u'nc', u'type': u'earthquake', u'status': u'AUTOMATIC', u'updated': 1382338025439, u'felt': None, u'alert': None, u'dmin': 0.34135981, u'mag': 2, u'gap': 118.8, u'types': u',general-link,geoserve,nearby-cities,origin,phase-data,scitech-link,', u'url': u'http://earthquake.usgs.gov/earthquakes/eventpage/nc72091921', u'ids': u',nc72091921,', u'tsunami': None, u'place': u'2km NE of Auberry, California', u'time': 1382336386000, u'mmi': None}, u'id': u'nc72091921'}\n"
      }
     ],
     "prompt_number": 338
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Specifically we are interested in the source, eqid, version, datetime, lat, lon, magnitude, nst, and region features of the earthquakes\n#We would like to extract the features above from the data\n\nsrc = []               #A list of the sources of the earthquakes\neqid = []              #A list of the loaction of the earthquakes\nversion = []           #The version number of the data\ndateTime = []          #A list of the date and time of the earthquakes\nlat = []               #A list of the latitude of the earthquakes\nlon = []               #A list of the longtitude of the earthquakes\nmagnitude = []         #A list of the magnitude of the earthquakes\nnst = []               #A list of the NST of the earthquakes\nregion = []            #A list of the region where the earthquake occured.",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 395
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#The following are functions for converting the time element in the data into a more readable format\n\n#print gmtime(float(str(anEarthquake['properties'][u'time'])[0:10]))\ndef usgsTimeExtraction(earthquake, humanReadable = True):\n    \"\"\"Takes in an earthquake (dictionary) and extracts the time from it, in seconds since the epoch (float)\"\"\"\n    time = earthquake['properties']['time']\n    if humanReadable:\n        return usgsTimeConversion(time)\n    return time\n\ndef usgsTimeConversion(time):\n    \"\"\"Takes in the seconds since the epoch (float) and returns a human readable time.\"\"\"\n    humanReadableTime = gmtime(float(str(time)[0:10]))\n    return strftime(\"%a %b %d %H:%M:%S %Y\", humanReadableTime)",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 396
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "print ctime()\nprint usgsTimeExtraction(anEarthquake)\n#print anEarthquake",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "Mon Oct 21 00:25:06 2013\nMon Oct 21 06:19:46 2013\n"
      }
     ],
     "prompt_number": 397
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#We loop over each earthquake in the data to pull out the relevant features.\n#Then we assign them to the lists we created above. \n\n#Sources of earthquakes\nfor earthquake in earthquakes:\n    src.append(earthquake['properties']['sources'])\n\n#Location of earthquakes\nfor earthquake in earthquakes: \n    eqid.append(earthquake['properties']['code'])\n\n#Version of data. 1 if new data. More than 1 if old data.\nfor earthquake in earthquakes: \n    version.append(1)\n       \n#Date and time of extraction. Should output \"Sunday, October 20, 2013 20:21:47 UTC\"\nfor earthquake in earthquakes: \n    dateTime.append(usgsTimeConversion(earthquake['properties']['time']))\n\n#Latitude of earthquakes\nfor earthquake in earthquakes: \n    lat.append(earthquake['geometry']['coordinates'][0])\n\n#Longtitude of earthquakes\nfor earthquake in earthquakes: \n    lon.append(earthquake['geometry']['coordinates'][1])\n\n#Magnitude of earthquakes\nfor earthquake in earthquakes: \n    magnitude.append(earthquake['properties']['mag'])\n    \n#NST of earthquakes\nfor earthquake in earthquakes: \n    nst.append(earthquake['properties']['nst'])\n\n#Region of earthquakes\nfor earthquake in earthquakes: \n    region.append(earthquake['properties']['place'])",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 398
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#We put the features of interest into a dictionary.\nearthquakeData = {'Source': src, 'Eqid': eqid, #'Version': version, \n                  'Datetime': dateTime, 'Lat': lat, 'Lon': lon, 'Magnitude': magnitude, 'NST': nst, 'Region': region, 'Version': version}",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 402
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Variables for expressing when \nnow = datetime.now()\ntimeStr = str(now.hour) + \":\" + str(now.minute) + \":\" + str(now.second)\ntimeZone = 'PST'\nname = 'EarthquakeData'+ \"_\" + str(date.today()) + \"_\" + timeStr + \"_\" + timezone + '.dict'\n\nprint timeStr\nprint timeZone\nprint name",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "0:26:11\nPST\nEarthquakeData_2013-10-21_0:26:11_PST.dict\n"
      }
     ],
     "prompt_number": 405
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#We store it in a pickle file for local cache\nwith open(name, 'wb') as f:\n    dump(earthquakeData, f)",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 406
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#To access cached data do the following:",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 380
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#We access the local pickle file by the following.\nwith open(name, 'rb') as f:\n    earthquakeData = load(f)",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 381
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#Since we are working with the cached data, if we make changes to it, we should change the version column so that it becomes cotents of original +1\n#for earthquake in earthquakeData['Version']: \n#    Version",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#We convert our data into a dataframe object\ndf = pd.DataFrame(earthquakeData)\n",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 407
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#We look at the first 10 earthquakes\ndf[0:10]",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Datetime</th>\n      <th>Eqid</th>\n      <th>Lat</th>\n      <th>Lon</th>\n      <th>Magnitude</th>\n      <th>NST</th>\n      <th>Region</th>\n      <th>Source</th>\n      <th>Version</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td> Mon Oct 21 06:38:00 2013</td>\n      <td> 11381514</td>\n      <td>-117.6920</td>\n      <td> 36.1223</td>\n      <td> 1.6</td>\n      <td> 19</td>\n      <td> 47km NNW of Searles Valley, California</td>\n      <td> ,ci,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td> Mon Oct 21 06:19:46 2013</td>\n      <td> 72091921</td>\n      <td>-119.4712</td>\n      <td> 37.0967</td>\n      <td> 2.0</td>\n      <td>NaN</td>\n      <td>          2km NE of Auberry, California</td>\n      <td> ,nc,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td> Mon Oct 21 06:09:32 2013</td>\n      <td> 11381506</td>\n      <td>-116.4688</td>\n      <td> 33.1473</td>\n      <td> 1.4</td>\n      <td> 21</td>\n      <td> 14km SW of Borrego Springs, California</td>\n      <td> ,ci,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td> Mon Oct 21 06:03:57 2013</td>\n      <td> 10827457</td>\n      <td>-148.6041</td>\n      <td> 62.0108</td>\n      <td> 1.6</td>\n      <td>NaN</td>\n      <td>      27km NNE of Sutton-Alpine, Alaska</td>\n      <td> ,ak,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td> Mon Oct 21 06:01:01 2013</td>\n      <td> 11381498</td>\n      <td>-116.7373</td>\n      <td> 34.0183</td>\n      <td> 1.6</td>\n      <td> 48</td>\n      <td>        12km NNE of Cabazon, California</td>\n      <td> ,ci,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td> Mon Oct 21 05:34:37 2013</td>\n      <td> 10827446</td>\n      <td>-149.6113</td>\n      <td> 62.9841</td>\n      <td> 1.4</td>\n      <td>NaN</td>\n      <td>            56km SW of Cantwell, Alaska</td>\n      <td> ,ak,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td> Mon Oct 21 05:33:56 2013</td>\n      <td> b000khs7</td>\n      <td> -25.9362</td>\n      <td>-56.6339</td>\n      <td> 4.9</td>\n      <td>NaN</td>\n      <td>             77km E of Visokoi Island, </td>\n      <td> ,us,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td> Mon Oct 21 05:32:24 2013</td>\n      <td> 10827444</td>\n      <td>-150.6963</td>\n      <td> 62.9888</td>\n      <td> 1.4</td>\n      <td>NaN</td>\n      <td>          79km NNW of Talkeetna, Alaska</td>\n      <td> ,ak,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td> Mon Oct 21 05:11:08 2013</td>\n      <td> 72091871</td>\n      <td>-122.7675</td>\n      <td> 38.8285</td>\n      <td> 1.9</td>\n      <td>NaN</td>\n      <td>              3km W of Cobb, California</td>\n      <td> ,nc,</td>\n      <td> 1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td> Mon Oct 21 04:53:14 2013</td>\n      <td> 72091856</td>\n      <td>-123.3385</td>\n      <td> 41.0055</td>\n      <td> 2.3</td>\n      <td>NaN</td>\n      <td>   25km ENE of Willow Creek, California</td>\n      <td> ,nc,</td>\n      <td> 1</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
       "output_type": "pyout",
       "prompt_number": 408,
       "text": "                   Datetime      Eqid       Lat      Lon  Magnitude  NST  \\\n0  Mon Oct 21 06:38:00 2013  11381514 -117.6920  36.1223        1.6   19   \n1  Mon Oct 21 06:19:46 2013  72091921 -119.4712  37.0967        2.0  NaN   \n2  Mon Oct 21 06:09:32 2013  11381506 -116.4688  33.1473        1.4   21   \n3  Mon Oct 21 06:03:57 2013  10827457 -148.6041  62.0108        1.6  NaN   \n4  Mon Oct 21 06:01:01 2013  11381498 -116.7373  34.0183        1.6   48   \n5  Mon Oct 21 05:34:37 2013  10827446 -149.6113  62.9841        1.4  NaN   \n6  Mon Oct 21 05:33:56 2013  b000khs7  -25.9362 -56.6339        4.9  NaN   \n7  Mon Oct 21 05:32:24 2013  10827444 -150.6963  62.9888        1.4  NaN   \n8  Mon Oct 21 05:11:08 2013  72091871 -122.7675  38.8285        1.9  NaN   \n9  Mon Oct 21 04:53:14 2013  72091856 -123.3385  41.0055        2.3  NaN   \n\n                                   Region Source  Version  \n0  47km NNW of Searles Valley, California   ,ci,        1  \n1           2km NE of Auberry, California   ,nc,        1  \n2  14km SW of Borrego Springs, California   ,ci,        1  \n3       27km NNE of Sutton-Alpine, Alaska   ,ak,        1  \n4         12km NNE of Cabazon, California   ,ci,        1  \n5             56km SW of Cantwell, Alaska   ,ak,        1  \n6              77km E of Visokoi Island,    ,us,        1  \n7           79km NNW of Talkeetna, Alaska   ,ak,        1  \n8               3km W of Cobb, California   ,nc,        1  \n9    25km ENE of Willow Creek, California   ,nc,        1  "
      }
     ],
     "prompt_number": 408
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 328
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "",
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
